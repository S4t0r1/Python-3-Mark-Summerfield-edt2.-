"""
      ***PREVIEW***
   
   total       = 183
   average     = 130.56
   median      = 43.00
   modus       = [5.00, 7.00, 50.00]
   std. dev    = 235.01

"""


# opens files from cmd line

import sys, collections, math


Statistics = collections.namedtuple("Statistics",
                     "mean mode median std_dev")

def main():
    if len(sys.argv) == 1 or sys.argv[1] in {"-h", "--help"}:
        print("usage: {0} file1[file2[...fileN]]".format(
            sys.argv[0]))
        sys.exit()
    
    numbers = []
    frequencies = collections.defaultdict(int)
    for filename in sys.argv[1:]:
        read_data(filename, numbers, frequencies)
    if numbers:
        statistics = calculate_statistics(numbers, frequencies)
        print_statistics(len(numbers), statistics)
    else:
        print("..no numbers were found")


def read_data(filename, numbers, frequencies):
    for lino, line in enumerate(open(filename, encoding="ascii"), 
                                                        start=1):
        for x in line.split():
            try:
                number = float(x)
                numbers.append(number)
                frequencies[number] += 1
            except ValueError as err:
                print("{filename}: {lino}: skipping {x}: {err}".format(
                                                           **locals()))


def calculate_statistics(numbers, frequencies):
    mean = sum(numbers) / len(numbers)
    mode = calculate_mode(frequencies, 3)
    median = calculate_median(numbers)
    std_dev = calculate_std_dev(numbers, mean)
    return Statistics(mean, mode, median, std_dev)


def calculate_mode(frequencies, max_mode):
    highest_freq = max(frequencies.values())
    mode = [number for number, frequency in frequencies.items()
                                  if frequency == highest_freq]
    if not (1 <= len(mode) <= max_mode):
        mode = None
    else:
        mode.sort()
    return mode


def calculate_median(numbers):
    numbers = sorted(numbers)
    middle = len(numbers) // 2
    median = numbers[middle]
    if len(numbers) % 2 == 0:
        median = (median + numbers[middle - 1]) / 2
    return median


def calculate_std_dev(numbers, mean):
    total = 0
    for number in numbers:
        total += ((number - mean) ** 2)
    variance = total / (len(numbers) - 1)
    return math.sqrt(variance)


def print_statistics(count, statistics):
    real = "9.2f"
    
    if statistics.mode is None:
        modeline = ""
    elif statistics.mode == 1:
        modeline = "modus       = {0:{fmt}}".format(statistics.mode, 
                                                           fmt=real)
    else:
        modeline = "modus       = [" + ", ".join(["{0:.2f}".format(m)
                                   for m in statistics.mode]) + "]\n"
    print("""\
total       = {0:6}
mid_value   = {mean:{fmt}}
median      = {median:{fmt}}
{1}\
std. dev.   = {std_dev:{fmt}}""".format(count, modeline,
                      fmt=real, **statistics._asdict()))

main()

#================================================================================
# opens specific file-/s

import sys, collections, math


Statistics = collections.namedtuple("Statistics",
                     "mean mode median std_dev")

def main():

    numbers = []
    frequencies = collections.defaultdict(int)
    filename = "statistics.dat"
    with open(filename, encoding="ascii"):
        read_data(filename, numbers, frequencies)
    if numbers:
        statistics = calculate_statistics(numbers, frequencies)
        print_statistics(len(numbers), statistics)
    else:
        print("..no numbers were found")


def read_data(filename, numbers, frequencies):
    for lino, line in enumerate(open(filename, encoding="ascii"), 
                                                        start=1):
        for x in line.split():
            try:
                number = float(x)
                numbers.append(number)
                frequencies[number] += 1
            except ValueError as err:
                print("{filename}: {lino}: skipping {x}: {err}".format(
                                                           **locals()))


def calculate_statistics(numbers, frequencies):
    mean = sum(numbers) / len(numbers)
    mode = calculate_mode(frequencies, 3)
    median = calculate_median(numbers)
    std_dev = calculate_std_dev(numbers, mean)
    return Statistics(mean, mode, median, std_dev)


def calculate_mode(frequencies, max_mode):
    highest_freq = max(frequencies.values())
    mode = [number for number, frequency in frequencies.items()
                                  if frequency == highest_freq]
    if not (1 <= len(mode) <= max_mode):
        mode = None
    else:
        mode.sort()
    return mode


def calculate_median(numbers):
    numbers = sorted(numbers)
    middle = len(numbers) // 2
    median = numbers[middle]
    if len(numbers) % 2 == 0:
        median = (median + numbers[middle - 1]) / 2
    return median


def calculate_std_dev(numbers, mean):
    total = 0
    for number in numbers:
        total += ((number - mean) ** 2)
    variance = total / (len(numbers) - 1)
    return math.sqrt(variance)


def print_statistics(count, statistics):
    real = "9.2f"
    
    if statistics.mode is None:
        modeline = ""
    elif statistics.mode == 1:
        modeline = "modus       = {0:{fmt}}".format(statistics.mode, 
                                                           fmt=real)
    else:
        modeline = "modus       = [" + ", ".join(["{0:.2f}".format(m)
                                   for m in statistics.mode]) + "]\n"
    print("""\
total       = {0:6}
mid_value   = {mean:{fmt}}
median      = {median:{fmt}}
{1}\
std. dev.   = {std_dev:{fmt}}""".format(count, modeline,
                      fmt=real, **statistics._asdict()))

main()
